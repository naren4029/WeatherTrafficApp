{"version":3,"sources":["Config/APIManager.ts","Sagas/FetchLocations/FetchLocations.ts","Sagas/FetchImages/FetchImages.ts","Sagas/index.ts","Store/DateTime/Models/Actions.ts","Store/DateTime/DateTimeReducer.ts","Store/Locations/Models/Actions.ts","Store/Locations/LocationsReducer.ts","Store/LocationImages/Models/Actions.ts","Store/LocationImages/LocationImagesReducer.ts","Store/RootStore.ts","App.tsx","Store/DateTime/DateTimeAction.ts","Store/Locations/LocationsAction.ts","Store/LocationImages/LocationImagesAction.ts","reportWebVitals.ts","index.tsx"],"names":["APIManager","locationsUrl","imagesUrl","fetchLocations","fetchLocationsWatcher","select","currState","fetch","dateTimeReducer","dateTime","then","response","json","put","type","takeLatest","fetchLocationImages","fetchLocationImagesWatcher","rootSaga","all","DATE_CHANGE","TIME_CHANGE","defaultState","date","time","GET_LOCATIONS","FETCHED_LOCATIONS","SELECTED_AREA","SELECTED_AREA_WEATHER","areaMetaData","areaWeatherData","selectedArea","name","labels","selectLocation","selectedAreaWeather","noData","loader","isLoading","FETCHED_LOCATION_IMAGES","SELECTED_LOCATION_IMAGE","areaImageData","selectedLocationImage","sagaMiddleware","createSagaMiddleware","rootReducer","combineReducers","state","action","nextState","payload","locationsReducer","area_metadata","length","items","forecasts","locationImageReducer","cameras","store","createStore","applyMiddleware","run","HeaderComponent","React","lazy","TrafficWeatherHomePage","NotificationPanel","App","props","this","getAllLocations","getAllLocationImages","Fragment","Suspense","fallback","className","Component","connect","dispatch","dateChanged","dateVal","changeDate","timeChanged","timeVal","changeTime","setSelectedArea","setSelectedAreaWeather","setSelectedLocationImage","selectedImageData","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e7682cf3.chunk.js","sourcesContent":["\r\nconst APIManager = {\r\n    locationsUrl: 'https://api.data.gov.sg/v1/environment/2-hour-weather-forecast',\r\n    imagesUrl: 'https://api.data.gov.sg/v1/transport/traffic-images'\r\n}\r\n\r\nexport default APIManager;\r\n","import { put, takeLatest, select } from 'redux-saga/effects';\r\nimport APIManager from '../../Config/APIManager';\r\n\r\nfunction* fetchLocations() {\r\n    const currState = yield select();\r\n    const json = yield fetch(APIManager.locationsUrl+'?date_time='+currState.dateTimeReducer.dateTime+':00')\r\n            .then(response => response.json(), );    \r\n    yield put({ type: \"FETCHED_LOCATIONS\", json: json, });\r\n}\r\n\r\nexport default function* fetchLocationsWatcher() {\r\n     yield takeLatest('GET_LOCATIONS', fetchLocations)\r\n}","import { put, takeLatest, select } from 'redux-saga/effects';\r\nimport APIManager from '../../Config/APIManager';\r\n\r\nfunction* fetchLocationImages() {\r\n    const currState = yield select();\r\n    const json = yield fetch(APIManager.imagesUrl+'?date_time='+currState.dateTimeReducer.dateTime+':00')\r\n            .then(response => response.json(), );    \r\n            \r\n    yield put({ type: \"FETCHED_LOCATION_IMAGES\", json: json, });\r\n}\r\n\r\nexport default function* fetchLocationImagesWatcher() {\r\n     yield takeLatest('GET_LOCATION_IMAGES', fetchLocationImages)\r\n}","import { all } from 'redux-saga/effects';\r\nimport fetchLocationsWatcher from './FetchLocations/FetchLocations';\r\nimport fetchLocationImagesWatcher from './FetchImages/FetchImages';\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        fetchLocationsWatcher(),\r\n        fetchLocationImagesWatcher()\r\n    ]);\r\n}","export const DATE_CHANGE = 'DATE_CHANGE';\r\nexport const TIME_CHANGE = 'TIME_CHANGE';\r\n\r\ninterface DateChangeAction {\r\n  type: typeof DATE_CHANGE;\r\n  payload:string;\r\n}\r\n\r\ninterface TimeChangeAction {\r\n  type: typeof TIME_CHANGE;\r\n  payload?:string;\r\n}\r\nexport type DateTimeActionTypes = DateChangeAction | TimeChangeAction;\r\n","import {\r\n  DateTimeActionTypes,\r\n  DATE_CHANGE,\r\n  TIME_CHANGE,\r\n} from './Models/Actions';\r\n\r\nimport { DateTime } from './Models/DateTime';\r\nimport { Action, Reducer } from 'redux';\r\n\r\nconst defaultState: DateTime = {\r\n  date: \"2016-03-01\",\r\n  time: \"00:00\",\r\n  dateTime:\"2016-03-01T00:00\"\r\n};\r\n\r\nexport const dateTimeReducer: Reducer<DateTime, Action> = (\r\n  state = defaultState,\r\n  action: DateTimeActionTypes\r\n) => {\r\n  const nextState = {\r\n    date: state.date,\r\n    time: state.time,\r\n    dateTime:state.date+'T'+state.time\r\n  };\r\n  switch (action.type) {\r\n    case DATE_CHANGE:\r\n      nextState.date = action.payload||'';\r\n      nextState.dateTime = action.payload+'T'+state.time;\r\n      return nextState;\r\n    case TIME_CHANGE:\r\n      nextState.time = action.payload||'';      \r\n      nextState.dateTime = state.date+'T'+action.payload;\r\n      return nextState;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export const GET_LOCATIONS = 'GET_LOCATIONS';\r\nexport const FETCHED_LOCATIONS = 'FETCHED_LOCATIONS';\r\nexport const SELECTED_AREA = 'SELECTED_AREA';\r\nexport const SELECTED_AREA_WEATHER = 'SELECTED_AREA_WEATHER';\r\n\r\ninterface GetLocationAction {\r\n  type: typeof GET_LOCATIONS;\r\n}\r\ninterface FetchedLocationAction {\r\n  type: typeof FETCHED_LOCATIONS;\r\n  json:any\r\n}\r\ninterface SelectedAreaAction {\r\n  type: typeof SELECTED_AREA;\r\n  payload: string;\r\n}\r\ninterface SelectedAreaWeatherAction {\r\n  type: typeof SELECTED_AREA_WEATHER;\r\n  payload: string;\r\n}\r\nexport type GetLocationActionTypes = GetLocationAction | FetchedLocationAction | SelectedAreaAction | SelectedAreaWeatherAction;\r\n","import { GetLocationActionTypes, FETCHED_LOCATIONS, SELECTED_AREA, SELECTED_AREA_WEATHER, GET_LOCATIONS } from './Models/Actions';\r\nimport { Locations } from './Models/Locations';\r\nimport { Action, Reducer } from 'redux';\r\nimport labels from '../../Assets/i18n/en.json'\r\n\r\nconst defaultState: Locations = {\r\n    areaMetaData:[],\r\n    areaWeatherData:[],\r\n    selectedArea:{name:labels.selectLocation},\r\n    selectedAreaWeather:labels.noData,\r\n    loader:{isLoading:false}\r\n}\r\n\r\nexport const locationsReducer: Reducer<Locations, Action> = (\r\n    state = defaultState,\r\n    action: GetLocationActionTypes\r\n) => {\r\n    const nextState = {\r\n        areaMetaData:state.areaMetaData,\r\n        areaWeatherData:state.areaWeatherData,\r\n        selectedArea:state.selectedArea,\r\n        selectedAreaWeather:state.selectedAreaWeather,\r\n        loader:state.loader\r\n    }\r\n    switch (action.type) {\r\n        case GET_LOCATIONS:\r\n            nextState.loader = {isLoading:true};\r\n            return nextState;\r\n        case FETCHED_LOCATIONS:\r\n            nextState.areaMetaData = (action.json && action.json.area_metadata && action.json.area_metadata.length)?action.json.area_metadata:[];\r\n            nextState.areaWeatherData = (action.json && action.json.items && action.json.items.length && action.json.items[0].forecasts)?action.json.items[0].forecasts:[];\r\n            nextState.loader = {isLoading:false};\r\n            return nextState;\r\n        case SELECTED_AREA:\r\n            nextState.selectedArea = action.payload;\r\n            return nextState;\r\n        case SELECTED_AREA_WEATHER:\r\n            nextState.selectedAreaWeather = action.payload;\r\n            return nextState;\r\n        default:\r\n        return state;\r\n    }\r\n}\r\n","export const GET_LOCATION_IMAGES = 'GET_LOCATION_IMAGES';\r\nexport const FETCHED_LOCATION_IMAGES = 'FETCHED_LOCATION_IMAGES';\r\nexport const SELECTED_LOCATION_IMAGE = 'SELECTED_LOCATION_IMAGE';\r\n\r\ninterface GetLocationImagesAction {\r\n  type: typeof GET_LOCATION_IMAGES;\r\n}\r\ninterface FetchedLocationImagesAction {\r\n  type: typeof FETCHED_LOCATION_IMAGES;\r\n  json: any;\r\n}\r\ninterface SelectedLocationImageAction {\r\n  type: typeof SELECTED_LOCATION_IMAGE;\r\n  payload: string;\r\n}\r\nexport type GetLocationImagesActionTypes = GetLocationImagesAction | FetchedLocationImagesAction |SelectedLocationImageAction;\r\n","import { GetLocationImagesActionTypes, FETCHED_LOCATION_IMAGES, SELECTED_LOCATION_IMAGE } from './Models/Actions';\r\nimport { LocationImages } from './Models/LocationImages';\r\nimport { Action, Reducer } from 'redux';\r\n\r\nconst defaultState: LocationImages = {\r\n    areaImageData:[],\r\n    selectedLocationImage:{}\r\n}\r\n\r\nexport const locationImageReducer: Reducer<LocationImages, Action> = (\r\n    state = defaultState,\r\n    action: GetLocationImagesActionTypes\r\n) => {\r\n    const nextState = {\r\n        areaImageData:state.areaImageData,\r\n        selectedLocationImage:state.selectedLocationImage\r\n    }\r\n    switch (action.type) {\r\n        case FETCHED_LOCATION_IMAGES:\r\n            nextState.areaImageData = (action.json && action.json.items && action.json.items.length && action.json.items[0].cameras.length)?action.json.items[0].cameras:[];\r\n            return nextState;\r\n        case SELECTED_LOCATION_IMAGE:\r\n            nextState.selectedLocationImage=action.payload;\r\n            return nextState;\r\n        default:\r\n        return state;\r\n    }\r\n}","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\n//import { createLogger } from 'redux-logger';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\n\r\nimport rootSaga from '../Sagas';\r\nimport { dateTimeReducer } from './DateTime/DateTimeReducer';\r\nimport {locationsReducer} from './Locations/LocationsReducer';\r\nimport {locationImageReducer} from './LocationImages/LocationImagesReducer';\r\n\r\n//const logger = createLogger();\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nexport const rootReducer =  combineReducers({    \r\n                                                dateTimeReducer, \r\n                                                locationsReducer,\r\n                                                locationImageReducer\r\n                                            });\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n\r\nexport const store = createStore(rootReducer,applyMiddleware(sagaMiddleware));\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\n","import React,{Component} from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\n\nimport { AppState } from './Store/RootStore';\nimport { changeDate, changeTime } from './Store/DateTime/DateTimeAction';\nimport './App.scss';\nimport { getLocations, setSelectedArea, setSelectedAreaWeather } from './Store/Locations/LocationsAction';\nimport { getLocationImages, setSelectedLocationImage } from './Store/LocationImages/LocationImagesAction';\n\ninterface AppProps {\n  dateChanged: (dateVal:string) => void;\n  timeChanged: (timeVal:string) => void;\n  getAllLocations:() => any;\n  getAllLocationImages:() => any;\n  setSelectedArea:(selectedArea:any) => void;\n  setSelectedAreaWeather:(selectedAreaWeather:string) => void;\n  setSelectedLocationImage:(selectedImageData:any) => void;\n}\nconst mapStateToProps = (state: AppState) => ({\n  date:state.dateTimeReducer.date,\n  time:state.dateTimeReducer.time,\n  areaMetaData:state.locationsReducer.areaMetaData,\n  areaWeatherData:state.locationsReducer.areaWeatherData,\n  areaImageData:state.locationImageReducer.areaImageData,\n  selectedArea:state.locationsReducer.selectedArea,\n  selectedAreaWeather:state.locationsReducer.selectedAreaWeather,\n  selectedLocationImage:state.locationImageReducer.selectedLocationImage,\n  loader:state.locationsReducer.loader\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch): AppProps => ({\n  dateChanged: (dateVal:string) => dispatch(changeDate(dateVal)),\n  timeChanged: (timeVal:string) => dispatch(changeTime(timeVal)),\n  getAllLocations:() => dispatch(getLocations()),\n  getAllLocationImages:() => dispatch(getLocationImages()),\n  setSelectedArea:(selectedArea:any) => dispatch(setSelectedArea(selectedArea)),\n  setSelectedAreaWeather:(selectedAreaWeather:string) => dispatch(setSelectedAreaWeather(selectedAreaWeather)),\n  setSelectedLocationImage:(selectedImageData:any) => dispatch(setSelectedLocationImage(selectedImageData))\n});\n\nconst HeaderComponent = React.lazy(() => import('./Components/Header/HeaderComponent'));\nconst TrafficWeatherHomePage = React.lazy(() => import('./Pages/Home/TrafficWeatherHomePage'));\nconst NotificationPanel = React.lazy(() => import('./Components/Notification/NotificationComponent'));\n\nexport class App extends Component<any> {\n  constructor(props:any){\n    super(props)\n  }\n  componentDidMount(){\n    this.props.getAllLocations();\n    this.props.getAllLocationImages();\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <React.Suspense fallback={<span>Loading...</span>}>\n          <NotificationPanel {...this.props}/>\n          <HeaderComponent/>\n          <div className=\"app-body\">\n            <TrafficWeatherHomePage {...this.props}/>\n          </div>\n        </React.Suspense>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\n","import { DATE_CHANGE, TIME_CHANGE } from './Models/Actions';\r\n\r\nexport const changeDate = (dateVal:string) => ({\r\n  type: DATE_CHANGE,\r\n  payload:dateVal\r\n});\r\n\r\nexport const changeTime = (timeVal:string) => ({\r\n  type: TIME_CHANGE,\r\n  payload:timeVal\r\n});\r\n","import { GET_LOCATIONS, FETCHED_LOCATIONS, SELECTED_AREA, SELECTED_AREA_WEATHER } from './Models/Actions';\r\n\r\nexport const getLocations = () => ({\r\n  type: GET_LOCATIONS\r\n});\r\n\r\nexport const fetchedLocations = () => ({\r\n  type: FETCHED_LOCATIONS\r\n});\r\nexport const setSelectedArea = (selectedArea:string) => ({\r\n  type: SELECTED_AREA,\r\n  payload:selectedArea\r\n});\r\nexport const setSelectedAreaWeather = (selectedAreaWeather:string) => ({\r\n  type: SELECTED_AREA_WEATHER,\r\n  payload:selectedAreaWeather\r\n});","import { GET_LOCATION_IMAGES, FETCHED_LOCATION_IMAGES, SELECTED_LOCATION_IMAGE} from './Models/Actions';\r\n\r\nexport const getLocationImages = () => ({\r\n  type: GET_LOCATION_IMAGES\r\n});\r\n\r\nexport const FetchedLocationImages = () => ({\r\n  type: FETCHED_LOCATION_IMAGES\r\n});\r\n\r\nexport const setSelectedLocationImage = (selectedImageData:any) => ({\r\n  type: SELECTED_LOCATION_IMAGE,\r\n  payload:selectedImageData\r\n});","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport { store } from './Store/RootStore';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}