{"version":3,"sources":["../node_modules/clsx/dist/clsx.m.js","Components/DateTime/DateTimeComponent.tsx","Components/LocationWeather/LocationWeatherComponent.tsx","Components/Screenshot/ScreenshotComponent.tsx","Pages/Home/TrafficWeatherUtils.ts","Pages/Home/TrafficWeatherHomePage.tsx"],"names":["toVal","mix","k","y","str","Array","isArray","length","tmp","x","i","arguments","DateTimeComponent","props","className","type","min","max","defaultValue","date","onChange","event","dateTimeChange","time","LocationWeatherComponent","locations","areaMetaData","textInput","useRef","id","optionChange","ref","value","selectedArea","name","labels","selectLocation","map","obj","indx","clsx","loader","isLoading","selectedAreaWeather","ScreenshotComponent","imageUrl","selectedLocationImage","image","backgroundImageStyle","backgroundImage","style","TrafficWeatherUtils","field","dateChanged","target","timeChanged","getAllLocations","getAllLocationImages","setSelectedAreaWeather","noData","setSelectedArea","setSelectedLocationImage","locationChange","locationWeather","selectedVal","current","filter","areaWeatherData","area","forecast","getNearestLocation","areaImageData","locationImages","nauticalDistance","areaLoc","label_location","nearestLocations","Object","keys","camLocation","location","areaDistance","haversine_distance","latitude","longitude","distance","index","lat1","lon1","lat2","lon2","rlat1","Math","PI","rlat2","difflat","difflon","asin","sqrt","sin","cos","TrafficWeatherHomePage","utils","Fragment","this","Component"],"mappings":"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","file":"static/js/3.f3c67822.chunk.js","sourcesContent":["function toVal(mix) {\n\tvar k, y, str='';\n\n\tif (typeof mix === 'string' || typeof mix === 'number') {\n\t\tstr += mix;\n\t} else if (typeof mix === 'object') {\n\t\tif (Array.isArray(mix)) {\n\t\t\tfor (k=0; k < mix.length; k++) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tif (y = toVal(mix[k])) {\n\t\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\t\tstr += y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (k in mix) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\tstr += k;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn str;\n}\n\nexport default function () {\n\tvar i=0, tmp, x, str='';\n\twhile (i < arguments.length) {\n\t\tif (tmp = arguments[i++]) {\n\t\t\tif (x = toVal(tmp)) {\n\t\t\t\tstr && (str += ' ');\n\t\t\t\tstr += x\n\t\t\t}\n\t\t}\n\t}\n\treturn str;\n}\n","import './DateTimeStyle.scss';\r\n\r\nexport default function DateTimeComponent(props:any){\r\n    \r\n    return(\r\n        <div className=\"date-time-pnl-cls\">\r\n            <input type=\"date\" className=\"input-content-cls\" min=\"2016-03-01\" max=\"2016-04-08\" defaultValue={props.date} onChange={(event)=>props.dateTimeChange(event,'date',props)}/>\r\n            <input type=\"time\" className=\"input-content-cls\" defaultValue={props.time} onChange={(event)=>props.dateTimeChange(event,'time',props)}/>\r\n        </div>\r\n    );\r\n}","import './LoactionWeatherStyle.scss';\r\nimport labels from '../../Assets/i18n/en.json';\r\nimport clsx from 'clsx';\r\nimport {useRef} from 'react';\r\n\r\nexport default function LocationWeatherComponent(props:any) {\r\n    const locations = props.areaMetaData;\r\n    let textInput = useRef(null);\r\n    \r\n    return (\r\n        <div className=\"location-weather-pnl-cls\">\r\n            <span className=\"location-list-pnl-cls\">\r\n                <select className=\"location-list-cls\" id=\"location-list\" onChange={()=>props.optionChange(textInput,locations,props)} ref={textInput} value={props.selectedArea.name}>\r\n                    <option key=\"99999\" value={labels.selectLocation} >{labels.selectLocation}</option>\r\n                    {locations&&locations.map((obj,indx) => <option key={indx} value={obj.name}>{obj.name}</option>)}\r\n                </select>\r\n                <span className={clsx({'loading-spinner-cls':props.loader.isLoading})}></span>\r\n            </span>\r\n            <span className=\"weather-cls\">{props.selectedAreaWeather}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import './ScreenshotStyle.scss';\r\n\r\nexport default function ScreenshotComponent(props:any){\r\n    const imageUrl = props.selectedLocationImage.image;\r\n    const backgroundImageStyle =  (imageUrl)?{backgroundImage:'url('+imageUrl+')'}:{};\r\n    return(\r\n        <div className=\"screenshot-pnl-cls\">\r\n            <div className=\"image-pnl-cls\" style={backgroundImageStyle}>\r\n            </div>\r\n            <div className=\"area-cls\">{props.selectedArea.name}</div>\r\n        </div>\r\n    );\r\n}\r\n","\r\nimport labels from '../../Assets/i18n/en.json';\r\n\r\nexport class TrafficWeatherUtils {\r\n    dateTimeChange = (event, field,props) =>{\r\n        switch(field){\r\n            case 'date' :\r\n                props.dateChanged(event.target.value);\r\n                break;\r\n            case 'time' :\r\n                props.timeChanged(event.target.value);\r\n                break;\r\n            default: break;\r\n        }\r\n        \r\n        props.getAllLocations();\r\n        props.getAllLocationImages();\r\n        props.setSelectedAreaWeather(labels.noData);\r\n        props.setSelectedArea({name:labels.selectLocation});\r\n        props.setSelectedLocationImage(false);\r\n    };\r\n    locationChange = (textInput:any,locations:any[],props:any)=>{\r\n        let locationWeather:any = labels.noData;\r\n        let selectedVal:any = textInput.current||'';\r\n        selectedVal = selectedVal.value;\r\n        let selectedArea:any = locations.filter((obj)=>obj.name === selectedVal);\r\n        selectedArea = selectedArea.length && selectedArea[0];\r\n\r\n        props.setSelectedArea(selectedArea);\r\n        locationWeather = props.areaWeatherData.filter((obj)=> obj.area === selectedVal);\r\n        locationWeather = (locationWeather.length&&locationWeather[0].forecast)||labels.noData;        \r\n        props.setSelectedAreaWeather(locationWeather);\r\n        let nearestLoaction = this.getNearestLocation(props.areaImageData,selectedArea);\r\n        if(!nearestLoaction){\r\n            props.setSelectedArea({name:labels.selectLocation});\r\n            props.setSelectedLocationImage(false);\r\n        }else{\r\n            props.setSelectedLocationImage(this.getNearestLocation(props.areaImageData,selectedArea));\r\n        }\r\n    };\r\n    getNearestLocation = (locationImages:any[],selectedArea:any) => {\r\n        \r\n        const areaLoc = selectedArea.label_location;\r\n        let nauticalDistance:any;\r\n        const nearestLocations = areaLoc && Object.keys(areaLoc).length && locationImages&&locationImages.map((obj,indx) => {\r\n            const camLocation = obj.location;\r\n            const areaDistance = this.haversine_distance(camLocation.latitude, camLocation.longitude, areaLoc.latitude, areaLoc.longitude);\r\n            if(!nauticalDistance){\r\n                nauticalDistance = {distance:areaDistance, index:indx};\r\n            }else if(areaDistance < nauticalDistance.distance){\r\n                nauticalDistance.distance=areaDistance;\r\n                nauticalDistance.index=indx;\r\n            }\r\n            return obj;\r\n        });\r\n        if(!nearestLocations || !nearestLocations.length){\r\n            return false;\r\n        }\r\n        return nearestLocations[nauticalDistance.index];\r\n    }\r\n    haversine_distance = (lat1:number, lon1:number, lat2:number, lon2:number) => {\r\n        //source:https://cloud.google.com/blog/products/maps-platform/how-calculate-distances-map-maps-javascript-api\r\n        var R = 3958.8; // Radius of the Earth in miles\r\n        var rlat1 = lat1 * (Math.PI/180); // Convert degrees to radians\r\n        var rlat2 = lat2 * (Math.PI/180); // Convert degrees to radians\r\n        var difflat = rlat2-rlat1; // Radian difference (latitudes)\r\n        var difflon = (lon1-lon2) * (Math.PI/180); // Radian difference (longitudes)\r\n\r\n        var d = 2 * R * Math.asin(Math.sqrt(Math.sin(difflat/2)*Math.sin(difflat/2)+Math.cos(rlat1)*Math.cos(rlat2)*Math.sin(difflon/2)*Math.sin(difflon/2)));\r\n        return d;\r\n    }\r\n}\r\n\r\nexport default TrafficWeatherUtils\r\n","import React, { Component } from 'react';\r\nimport DateTimeComponent from '../../Components/DateTime/DateTimeComponent';\r\nimport LocationWeatherComponent from '../../Components/LocationWeather/LocationWeatherComponent';\r\nimport ScreenshotComponent from '../../Components/Screenshot/ScreenshotComponent';\r\nimport TrafficWeatherUtils from './TrafficWeatherUtils';\r\n\r\nexport class TrafficWeatherHomePage extends Component<any> {\r\n    constructor(props:any){\r\n        super(props);\r\n    }\r\n    render() {\r\n        const utils = new TrafficWeatherUtils();\r\n        return (\r\n            <React.Fragment>\r\n                <DateTimeComponent {...this.props} dateTimeChange={utils.dateTimeChange}/>\r\n                <LocationWeatherComponent {...this.props} optionChange={utils.locationChange}/>\r\n                <ScreenshotComponent {...this.props}/>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TrafficWeatherHomePage\r\n"],"sourceRoot":""}